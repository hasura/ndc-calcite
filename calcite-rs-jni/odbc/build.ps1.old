$ErrorActionPreference = 'Stop'
$startTime = Get-Date
$buildResults = @()

function Write-Step {
    param([string]$message)
    Write-Host "`n=== $message ===" -ForegroundColor Cyan
}

function Format-Duration {
    param([TimeSpan]$duration)
    return "{0:mm}:{0:ss}.{0:fff}" -f $duration
}

try {
    # Clean
    Write-Step "Cleaning solution"
    $stepStart = Get-Date
    .\clean.ps1
    $buildResults += @{
        Step = "Clean"
        Duration = (Get-Date) - $stepStart
        Status = "Success"
    }

    # Restore NuGet packages for x64
    Write-Step "Restoring NuGet packages for x64"
    $stepStart = Get-Date
    dotnet restore DDN-ODBC.sln -r win-x64
    if ($LASTEXITCODE -ne 0) { throw "NuGet restore for x64 failed" }
    $buildResults += @{
        Step = "Restore x64"
        Duration = (Get-Date) - $stepStart
        Status = "Success"
    }

    # Manually create project.assets.json files for ARM64
    Write-Step "Manually creating project.assets.json files for ARM64"
    $stepStart = Get-Date
    dotnet restore DDN-ODBC.sln -r win-arm64 --force-evaluate
    if ($LASTEXITCODE -ne 0) { throw "Failed to manually create project.assets.json files for ARM64" }
    $buildResults += @{
        Step = "Create ARM64 project.assets.json"
        Duration = (Get-Date) - $stepStart
        Status = "Success"
    }

    # Build x64 Debug
    Write-Step "Building Debug|x64"
    $stepStart = Get-Date
    msbuild DDN-ODBC.sln /t:Build /p:Configuration=Debug /p:Platform=x64
    if ($LASTEXITCODE -ne 0) { throw "x64 Debug build failed" }
    $buildResults += @{
        Step = "Debug|x64"
        Duration = (Get-Date) - $stepStart
        Status = "Success"
    }

    # Build ARM64 Debug
    Write-Step "Building Debug|ARM64"
    $stepStart = Get-Date
    msbuild DDN-ODBC.sln /t:Build /p:Configuration=Debug /p:Platform=ARM64
    if ($LASTEXITCODE -ne 0) { throw "ARM64 Debug build failed" }
    $buildResults += @{
        Step = "Debug|ARM64"
        Duration = (Get-Date) - $stepStart
        Status = "Success"
    }

    # Copy install-driver.ps1 to build output
    Write-Step "Copying install-driver.ps1 to build outputs"
    $stepStart = Get-Date
    Copy-Item -Path "install-driver.ps1" -Destination "bin\Debug\x64\install-driver.ps1" -Force
    Copy-Item -Path "install-driver.ps1" -Destination "bin\Debug\ARM64\install-driver.ps1" -Force
    $buildResults += @{
        Step = "Copy install-driver.ps1"
        Duration = (Get-Date) - $stepStart
        Status = "Success"
    }

    # Verify outputs exist
    Write-Step "Verifying build outputs"
    $stepStart = Get-Date
    $expectedOutputs = @(
        "bin\Debug\x64\DDN-ODBC-Driver.dll",
        "bin\Debug\x64\DDN-ODBC.dll",
        "bin\Debug\x64\DDN-ODBC-Tester.exe",
        "bin\Debug\x64\install-driver.ps1",
        "bin\Debug\ARM64\DDN-ODBC-Driver.dll",
        "bin\Debug\ARM64\DDN-ODBC.dll",
        "bin\Debug\ARM64\DDN-ODBC-Tester.exe",
        "bin\Debug\ARM64\install-driver.ps1"
    )

    $missingFiles = @()
    foreach ($file in $expectedOutputs) {
        if (-not (Test-Path $file)) {
            $missingFiles += $file
        }
    }

    if ($missingFiles.Count -gt 0) {
        throw "Missing expected outputs:`n" + ($missingFiles -join "`n")
    }
    $buildResults += @{
        Step = "Verification"
        Duration = (Get-Date) - $stepStart
        Status = "Success"
    }

    # Print summary
    $totalDuration = (Get-Date) - $startTime
    Write-Host "`n=== Build Summary ===" -ForegroundColor Green
    Write-Host "Total Duration: $(Format-Duration $totalDuration)" -ForegroundColor Green
    Write-Host "`nStep Details:"
    foreach ($result in $buildResults) {
        $color = if ($result.Status -eq "Success") { "Green" } else { "Red" }
        Write-Host "$($result.Step): " -NoNewline
        Write-Host "$($result.Status)" -ForegroundColor $color -NoNewline
        Write-Host " ($(Format-Duration $result.Duration))"
    }

    Write-Host "`nOutputs available in:"
    Write-Host "  - bin\Debug\x64"
    Write-Host "  - bin\Debug\ARM64"
}
catch {
    Write-Host "`n=== Build Failed ===" -ForegroundColor Red
    Write-Host $_.Exception.Message -ForegroundColor Red
    Write-Host "`nBuild Steps Completed:"
    foreach ($result in $buildResults) {
        $color = if ($result.Status -eq "Success") { "Green" } else { "Red" }
        Write-Host "$($result.Step): " -NoNewline
        Write-Host "$($result.Status)" -ForegroundColor $color -NoNewline
        Write-Host " ($(Format-Duration $result.Duration))"
    }
    exit 1
}