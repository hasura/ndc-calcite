# This workflow builds a Docker image, then logs in, and finally pushes the image.
# This separation prevents the temporary GITHUB_TOKEN from expiring during long builds.
name: Docker Build and Push (Split Steps)

on:
  push:
    tags:
      - 'v*'      # Run on version tags like v1.2.3
  # Allow manual triggers from the Actions tab
  workflow_dispatch: {}

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: hasura/ndc-calcite

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Required to push to GitHub Packages (GHCR)
      id-token: write # Not strictly required for this flow, but good practice for OIDC
      actions: write  # Not strictly required for this flow

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      # --- Step 1: Build the image but DO NOT push it yet ---
      # It is built and loaded into the local Docker daemon on the runner.
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # Set push to false to only build the image
          push: false
          # Load the image into the local Docker engine
          load: true

      # --- Step 2: Log in AFTER the build is complete ---
      # This ensures the token is fresh and won't expire before the push.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- Step 3: Push the previously built image ---
      # This step uses the standard 'docker push' command.
      - name: Push Docker image
        run: docker push --all-tags ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Print Docker image tags
        run: |
          echo "Docker image was built and pushed with the following tags:"
          echo "${{ steps.meta.outputs.tags }}"
